pipeline {
    agent any
    tools {
        maven "mymaven"
    }
    environment {
        DOCKER_IMAGE = 'mahesh6bot/java-argocd'
        REGISTRY_CREDENTIALS = credentials('docker-cred')
        GITHUB_TOKEN = credentials('github-token')
        GIT_REPO_NAME = "Projects"
        GIT_USER_NAME = "i-am-maheshpasupuleti"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/i-am-maheshpasupuleti/Projects.git'
            }
        }

        stage('Build') {
            steps {
                sh 'cd java-argocd && mvn clean package'
            }
        }

        stage('Code Quality Analysis') {
            steps {
                withSonarQubeEnv('mysonar') {
                    sh 'cd java-argocd && mvn clean verify sonar:sonar -Dsonar.projectKey=myproject'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonarcred'
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    dir('java-argocd') {
                        def dockerImage = docker.build("${DOCKER_IMAGE}:${BUILD_NUMBER}")
                        docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                            dockerImage.push()
                            dockerImage.push('latest')
                        }
                    }
                }
            }
        }

        stage('Update Deployment Manifest') {
            steps {
                script {
                    sh '''
                        # Update image tag dynamically in deployment.yml
                        sed -i "s|\\(image: .*/projects:\\).*|\\1${BUILD_NUMBER}|g" argocd-deploy/deployment.yml

                        # Configure Git
                        cd argocd-deploy
                        git config user.email "mahesh@example.com"
                        git config user.name "mahesh CI"

                        # Commit and push the changes
                        git add deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                    '''
                }
            }
        }
    }
}
